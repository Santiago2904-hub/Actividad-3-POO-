import tkinter as tk
from tkinter import messagebox
import math



class FiguraGeometrica:
    """Clase base para todas las figuras geométricas."""
    def __init__(self):
        self._volumen = 0.0
        self._superficie = 0.0

    @property
    def volumen(self):
        return self._volumen

    @volumen.setter
    def volumen(self, volumen):
        self._volumen = volumen

    @property
    def superficie(self):
        return self._superficie

    @superficie.setter
    def superficie(self, superficie):
        self._superficie = superficie

class Cilindro(FiguraGeometrica):
    """Subclase para el Cilindro. Calcula volumen y superficie."""
    def __init__(self, radio, altura):
        super().__init__()
        self.radio = radio
        self.altura = altura
        self.volumen = self.calcularVolumen()
        self.superficie = self.calcularSuperficie()

    def calcularVolumen(self):
        """Volumen = PI * altura * radio^2"""
        return math.pi * self.altura * math.pow(self.radio, 2.0)

    def calcularSuperficie(self):
        """Superficie = 2 * PI * radio * altura + 2 * PI * radio^2"""
        area_lateral = 2.0 * math.pi * self.radio * self.altura
        area_base = 2.0 * math.pi * math.pow(self.radio, 2.0)
        return area_lateral + area_base

class Esfera(FiguraGeometrica):
    """Subclase para la Esfera. Calcula volumen y superficie."""
    def __init__(self, radio):
        super().__init__()
        self.radio = radio
        self.volumen = self.calcularVolumen()
        self.superficie = self.calcularSuperficie()

    def calcularVolumen(self):
        """Volumen = (4/3) * PI * radio^3"""
        return (4.0 / 3.0) * math.pi * math.pow(self.radio, 3.0)

    def calcularSuperficie(self):
        """Superficie = 4 * PI * radio^2"""
        return 4.0 * math.pi * math.pow(self.radio, 2.0)

class Piramide(FiguraGeometrica):
    """Subclase para la Pirámide de base cuadrada. Calcula volumen y superficie."""
    def __init__(self, base, altura, apotema):
        super().__init__()
        self.base = base
        self.altura = altura
        self.apotema = apotema
        self.volumen = self.calcularVolumen()
        self.superficie = self.calcularSuperficie()

    def calcularVolumen(self):
        """Volumen = (base^2 * altura) / 3"""
        return (math.pow(self.base, 2.0) * self.altura) / 3.0

    def calcularSuperficie(self):
        """Superficie = base^2 (área base) + 2 * base * apotema (área lateral)"""
        area_base = math.pow(self.base, 2.0)
        area_lado = 2.0 * self.base * self.apotema
        return area_base + area_lado



class VentanaFigura(tk.Toplevel):
    """Clase base para las ventanas de figura (Cilindro, Esfera, Pirámide)."""
    def __init__(self, master, titulo, ancho, alto):
        super().__init__(master)
        self.title(titulo)
        self.geometry(f"{ancho}x{alto}")
        self.resizable(False, False)
        
        # Centrar la ventana y hacerla modal
        self.grab_set() 
        self.transient(master)
        self.focus_set()
        
        # Variables para resultados
        self.volumen_var = tk.StringVar(value="Volumen (cm³):")
        self.superficie_var = tk.StringVar(value="Superficie (cm²):")
        
        # Posicionar etiquetas de resultado al final de la ventana
        y_pos_vol = alto - 80
        y_pos_sup = alto - 50

        tk.Label(self, textvariable=self.volumen_var, anchor="w").place(x=20, y=y_pos_vol, width=220, height=23)
        tk.Label(self, textvariable=self.superficie_var, anchor="w").place(x=20, y=y_pos_sup, width=220, height=23)

    def validar_y_obtener_float(self, campo, nombre_campo):
        """Intenta obtener y convertir el texto de un campo a float."""
        try:
            valor = float(campo.get().strip())
            if valor <= 0:
                raise ValueError(f"El valor de {nombre_campo} debe ser positivo.")
            return valor
        except ValueError:
            raise ValueError(f"'{nombre_campo}' debe ser un número positivo válido.")

class VentanaCilindro(VentanaFigura):
    def __init__(self, master):
        super().__init__(master, "Cilindro", 280, 210)
        self.inicio()

    def inicio(self):
        # Radio
        tk.Label(self, text="Radio (cms):").place(x=20, y=20, width=80, height=23)
        self.campoRadio = tk.Entry(self)
        self.campoRadio.place(x=100, y=20, width=135, height=23)

        # Altura
        tk.Label(self, text="Altura (cms):").place(x=20, y=50, width=80, height=23)
        self.campoAltura = tk.Entry(self)
        self.campoAltura.place(x=100, y=50, width=135, height=23)
        
        # Botón Calcular
        tk.Button(self, text="Calcular", command=self.calcular_figura).place(x=100, y=80, width=135, height=23)

    def calcular_figura(self):
        """Método que gestiona el evento del botón Calcular para el Cilindro."""
        try:
            radio = self.validar_y_obtener_float(self.campoRadio, "Radio")
            altura = self.validar_y_obtener_float(self.campoAltura, "Altura")
            
            cilindro = Cilindro(radio, altura)
            
            self.volumen_var.set(f"Volumen (cm³): {cilindro.volumen:.2f}")
            self.superficie_var.set(f"Superficie (cm²): {cilindro.superficie:.2f}")
            
        except ValueError as e:
            messagebox.showerror("Error de Entrada", str(e))
        except Exception as e:
            messagebox.showerror("Error Desconocido", f"Ocurrió un error inesperado: {e}")

class VentanaEsfera(VentanaFigura):
    def __init__(self, master):
        super().__init__(master, "Esfera", 280, 200)
        self.inicio()

    def inicio(self):
        # Radio
        tk.Label(self, text="Radio (cms):").place(x=20, y=20, width=80, height=23)
        self.campoRadio = tk.Entry(self)
        self.campoRadio.place(x=100, y=20, width=135, height=23)
        
        # Botón Calcular
        tk.Button(self, text="Calcular", command=self.calcular_figura).place(x=100, y=50, width=135, height=23)

    def calcular_figura(self):
        """Método que gestiona el evento del botón Calcular para la Esfera."""
        try:
            radio = self.validar_y_obtener_float(self.campoRadio, "Radio")
            
            esfera = Esfera(radio)
            
            self.volumen_var.set(f"Volumen (cm³): {esfera.volumen:.2f}")
            self.superficie_var.set(f"Superficie (cm²): {esfera.superficie:.2f}")
            
        except ValueError as e:
            messagebox.showerror("Error de Entrada", str(e))
        except Exception as e:
            messagebox.showerror("Error Desconocido", f"Ocurrió un error inesperado: {e}")

class VentanaPiramide(VentanaFigura):
    def __init__(self, master):
        super().__init__(master, "Pirámide", 280, 240)
        self.inicio()

    def inicio(self):
        # Base
        tk.Label(self, text="Base (cms):").place(x=20, y=20, width=90, height=23)
        self.campoBase = tk.Entry(self)
        self.campoBase.place(x=120, y=20, width=135, height=23)
        
        # Altura
        tk.Label(self, text="Altura (cms):").place(x=20, y=50, width=90, height=23)
        self.campoAltura = tk.Entry(self)
        self.campoAltura.place(x=120, y=50, width=135, height=23)
        
        # Apotema
        tk.Label(self, text="Apotema (cms):").place(x=20, y=80, width=90, height=23)
        self.campoApotema = tk.Entry(self)
        self.campoApotema.place(x=120, y=80, width=135, height=23)
        
        # Botón Calcular
        tk.Button(self, text="Calcular", command=self.calcular_figura).place(x=120, y=110, width=135, height=23)

    def calcular_figura(self):
        """Método que gestiona el evento del botón Calcular para la Pirámide."""
        try:
            base = self.validar_y_obtener_float(self.campoBase, "Base")
            altura = self.validar_y_obtener_float(self.campoAltura, "Altura")
            apotema = self.validar_y_obtener_float(self.campoApotema, "Apotema")
            
            piramide = Piramide(base, altura, apotema)
            
            self.volumen_var.set(f"Volumen (cm³): {piramide.volumen:.2f}")
            self.superficie_var.set(f"Superficie (cm²): {piramide.superficie:.2f}")
            
        except ValueError as e:
            messagebox.showerror("Error de Entrada", str(e))
        except Exception as e:
            messagebox.showerror("Error Desconocido", f"Ocurrió un error inesperado: {e}")


class VentanaPrincipal(tk.Tk):
    """Ventana principal que actúa como menú."""
    def __init__(self):
        super().__init__()
        self.title("Figuras Geométricas")
        self.geometry("350x160")
        self.resizable(False, False)
        
        self.inicio()

    def inicio(self):
        
        tk.Label(self, text="Seleccione una figura para calcular:", font=('Arial', 10, 'bold')).place(x=20, y=20)

        # Botones que abren las ventanas secundarias
        tk.Button(self, text="Cilindro", command=lambda: VentanaCilindro(self)).place(x=20, y=50, width=90, height=35)
        tk.Button(self, text="Esfera", command=lambda: VentanaEsfera(self)).place(x=120, y=50, width=90, height=35)
        tk.Button(self, text="Pirámide", command=lambda: VentanaPiramide(self)).place(x=220, y=50, width=110, height=35)


if __name__ == "__main__":
    app = VentanaPrincipal()
    app.mainloop()
